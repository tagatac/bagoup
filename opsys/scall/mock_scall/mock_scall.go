// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tagatac/bagoup/v2/opsys/scall (interfaces: Syscall)

// Package mock_scall is a generated GoMock package.
package mock_scall

import (
	reflect "reflect"
	syscall "syscall"

	gomock "github.com/golang/mock/gomock"
)

// MockSyscall is a mock of Syscall interface.
type MockSyscall struct {
	ctrl     *gomock.Controller
	recorder *MockSyscallMockRecorder
}

// MockSyscallMockRecorder is the mock recorder for MockSyscall.
type MockSyscallMockRecorder struct {
	mock *MockSyscall
}

// NewMockSyscall creates a new mock instance.
func NewMockSyscall(ctrl *gomock.Controller) *MockSyscall {
	mock := &MockSyscall{ctrl: ctrl}
	mock.recorder = &MockSyscallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyscall) EXPECT() *MockSyscallMockRecorder {
	return m.recorder
}

// Getrlimit mocks base method.
func (m *MockSyscall) Getrlimit(arg0 int, arg1 *syscall.Rlimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getrlimit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Getrlimit indicates an expected call of Getrlimit.
func (mr *MockSyscallMockRecorder) Getrlimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getrlimit", reflect.TypeOf((*MockSyscall)(nil).Getrlimit), arg0, arg1)
}

// Setrlimit mocks base method.
func (m *MockSyscall) Setrlimit(arg0 int, arg1 *syscall.Rlimit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setrlimit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setrlimit indicates an expected call of Setrlimit.
func (mr *MockSyscallMockRecorder) Setrlimit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setrlimit", reflect.TypeOf((*MockSyscall)(nil).Setrlimit), arg0, arg1)
}
